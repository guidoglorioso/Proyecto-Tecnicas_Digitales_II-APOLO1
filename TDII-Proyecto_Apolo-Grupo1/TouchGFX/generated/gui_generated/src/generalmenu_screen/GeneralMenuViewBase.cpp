/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/generalmenu_screen/GeneralMenuViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>
#include <images/BitmapDatabase.hpp>

GeneralMenuViewBase::GeneralMenuViewBase() :
    buttonCallback(this, &GeneralMenuViewBase::buttonCallbackHandler),
    sliderValueChangedCallback(this, &GeneralMenuViewBase::sliderValueChangedCallbackHandler)
{
    __background.setPosition(0, 0, 480, 320);
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
    add(__background);

    BackGroundAndTitle.setPosition(0, 0, 480, 320);
    template1.setXY(0, 0);
    BackGroundAndTitle.add(template1);

    Title.setXY(86, 0);
    Title.setColor(touchgfx::Color::getColorFromRGB(255, 227, 216));
    Title.setLinespacing(0);
    Title.setTypedText(touchgfx::TypedText(T___SINGLEUSE_9EMA));
    BackGroundAndTitle.add(Title);

    add(BackGroundAndTitle);

    LabelEstadoCanal.setXY(84, 144);
    LabelEstadoCanal.setColor(touchgfx::Color::getColorFromRGB(0, 34, 89));
    LabelEstadoCanal.setLinespacing(0);
    LabelEstadoCanal.setTypedText(touchgfx::TypedText(T___SINGLEUSE_SZTV));
    add(LabelEstadoCanal);

    TogEstadoLoudness.setXY(316, 160);
    TogEstadoLoudness.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_TOGGLEBUTTON_SMALL_ROUND_SMALL_ON_NORMAL_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_TOGGLEBUTTON_SMALL_ROUND_SMALL_OFF_LIGHT_ID));
    TogEstadoLoudness.setAction(buttonCallback);
    add(TogEstadoLoudness);

    LabelCrossOver.setXY(81, 50);
    LabelCrossOver.setColor(touchgfx::Color::getColorFromRGB(0, 34, 89));
    LabelCrossOver.setLinespacing(0);
    LabelCrossOver.setTypedText(touchgfx::TypedText(T___SINGLEUSE_XZDR));
    add(LabelCrossOver);

    ButtSistema.setXY(297, 44);
    ButtSistema.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_36_TINY_ROUNDED_DISABLED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_36_TINY_ROUNDED_DISABLED_ID));
    ButtSistema.setLabelText(touchgfx::TypedText(T_PERS_SYSTEM_CONFIGRAP));
    ButtSistema.setLabelColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    ButtSistema.setLabelColorPressed(touchgfx::Color::getColorFromRGB(255, 255, 255));
    ButtSistema.setAction(buttonCallback);
    add(ButtSistema);

    LabelCanalAudio.setXY(84, 83);
    LabelCanalAudio.setColor(touchgfx::Color::getColorFromRGB(0, 34, 89));
    LabelCanalAudio.setLinespacing(0);
    LabelCanalAudio.setTypedText(touchgfx::TypedText(T___SINGLEUSE_2YGQ));
    add(LabelCanalAudio);

    ButtEc.setXY(297, 97);
    ButtEc.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_36_TINY_ROUNDED_DISABLED_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_36_TINY_ROUNDED_DISABLED_ID));
    ButtEc.setLabelText(touchgfx::TypedText(T_PLANO_CONFIGRAP));
    ButtEc.setLabelColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
    ButtEc.setLabelColorPressed(touchgfx::Color::getColorFromRGB(255, 255, 255));
    ButtEc.setAction(buttonCallback);
    add(ButtEc);

    homeAndBack1.setXY(0, 255);
    add(homeAndBack1);

    LabelVolumenCanal.setXY(84, 205);
    LabelVolumenCanal.setColor(touchgfx::Color::getColorFromRGB(0, 34, 89));
    LabelVolumenCanal.setLinespacing(0);
    LabelVolumenCanal.setTypedText(touchgfx::TypedText(T___SINGLEUSE_K7QF));
    add(LabelVolumenCanal);

    sliderVolumenMaximo.setXY(235, 218);
    sliderVolumenMaximo.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_SLIDER_HORIZONTAL_THIN_TRACK_SMALL_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_SLIDER_HORIZONTAL_THIN_FILLER_SMALL_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_SLIDER_HORIZONTAL_THIN_ROUNDED_DARK_ID));
    sliderVolumenMaximo.setupHorizontalSlider(12, 9, 0, 0, 200);
    sliderVolumenMaximo.setValueRange(0, 100);
    sliderVolumenMaximo.setValue(75);
    sliderVolumenMaximo.setNewValueCallback(sliderValueChangedCallback);
    add(sliderVolumenMaximo);
}

GeneralMenuViewBase::~GeneralMenuViewBase()
{

}

void GeneralMenuViewBase::setupScreen()
{
    template1.initialize();
    homeAndBack1.initialize();
}

void GeneralMenuViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &ButtSistema)
    {
        //Interaction1
        //When ButtSistema clicked call virtual function
        //Call GFXTipoSistemaChange
        GFXTipoSistemaChange();
    }
    if (&src == &ButtEc)
    {
        //Interaction2
        //When ButtEc clicked call virtual function
        //Call GFXCambioEcualizador
        GFXCambioEcualizador();
    }
    if (&src == &TogEstadoLoudness)
    {
        //Interaction4
        //When TogEstadoLoudness clicked call virtual function
        //Call GFXChangeLoudnessState
        GFXChangeLoudnessState();
    }
}

void GeneralMenuViewBase::sliderValueChangedCallbackHandler(const touchgfx::Slider& src, int value)
{
    if (&src == &sliderVolumenMaximo)
    {
        //Interaction3
        //When sliderVolumenMaximo value changed call virtual function
        //Call GFXVolumenMaximoChange
        GFXVolumenMaximoChange(value);
    }
}
